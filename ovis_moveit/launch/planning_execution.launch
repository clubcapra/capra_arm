<launch>

  <arg name="pipeline" default="ompl" />
  <arg name="debug" default="false" />
  <arg name="simu" default="false" />

  <!-- Launch Ovis Controller Spawner --> 
  <include file="$(find ovis_moveit)/launch/ovis_controller_spawner.launch"/>

  <!-- Launch Planning context --> 
  <include file="$(find ovis_moveit_config)/launch/planning_context.launch"/>

  <!-- Publishes /joint_states message with values read from /source_list -->
  <group if="$(arg simu)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/ovis/joint_states]</rosparam> 
    </node>
  </group>
  <group unless="$(arg simu)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/ovis/arm/out/joint_states]</rosparam> 
    </node>
  </group>

  <!-- convert /joint_states message to TF transforms -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="true" output="screen">
  </node>

  <!-- Launch move group -->
  <include file="$(find ovis_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
        <arg name="publish_monitored_planning_scene" value="true" />
        <arg name="debug" value="$(arg debug)"/>
        <arg name="pipeline" value="$(arg pipeline)"/>
    </include>
    
</launch>